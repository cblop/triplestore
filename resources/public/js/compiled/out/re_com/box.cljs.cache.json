["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate"],"~:excludes",["~#set",[]],"~:name","~$re-com.box","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^<","^<","^4","^4"],"~:uses",["^ ","~$html-attr?","^4","~$scroll-style?","^4","~$align-style?","^4","~$justify-style?","^4","~$scroll-options-list","^4","~$css-style?","^4","~$justify-options-list","^4","~$string-or-hiccup?","^4","~$align-options-list","^4"],"~:defs",["^ ","~$align-style",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","~:line",82,"~:column",7,"~:end-line",82,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^Q",[["~$attribute","~$align"]]]]],"~:doc","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"^7","~$re-com.box/align-style","~:variadic",false,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",18,"~:method-params",["^Q",[["^S","^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^M",1,"^L",82,"^N",82,"~:max-fixed-arity",2,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^U","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"~$h-box",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",233,"^M",7,"^N",233,"^O",12,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","~:keys",["~$size","~$width","~$height","~$min-width","~$min-height","~$max-width","~$max-height","~$justify","^T","~$align-self","~$margin","~$padding","~$gap","~$children","~$class","~$style","~$attr"],"~:or",["^ ","^13","none","^1:","~:start","^T","~:stretch"],"~:as","~$args"]]]]]],"^U","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent","~:top-fn",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^Z",["^Q",[null]]]],"^7","~$re-com.box/h-box","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",12,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",233,"^N",233,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^U","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"],"~$border",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",473,"^M",7,"^N",473,"^O",13,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1<","^1=","^1J","~$l-border","~$r-border","~$t-border","~$b-border","~$radius","~$child","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]]]],"^U","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)","^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^Z",["^Q",[null]]]],"^7","~$re-com.box/border","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",13,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",473,"^N",473,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^U","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)"],"~$flex-flow-style",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",60,"^M",7,"^N",60,"^O",22,"^P",["^Q",["^R",["^Q",[["~$flex-flow"]]]]],"^U","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"^7","~$re-com.box/flex-flow-style","^W",false,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",22,"^X",["^Q",[["^1S"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",60,"^N",60,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["^1S"]]]]],"^U","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"~$h-box-args-desc",["^ ","^7","~$re-com.box/h-box-args-desc","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",214,"^M",1,"^N",214,"^O",21,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",214,"^M",6,"^N",214,"^O",21]],"~$scroller",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",407,"^M",7,"^N",407,"^O",15,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","^12",["^13","~$scroll","~$h-scroll","~$v-scroll","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","auto"],"^1F","^1G"]]]]]],"^U","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value","^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","auto"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","auto"],"^1F","^1G"]]]],"^Z",["^Q",[null]]]],"^7","~$re-com.box/scroller","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",15,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","auto"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","auto"],"^1F","^1G"]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","auto"],"^1F","^1G"]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",407,"^N",407,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","auto"],"^1F","^1G"]]]],"^U","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value"],"~$box",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",352,"^M",7,"^N",352,"^O",10,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]]]],"^U","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box","^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^Z",["^Q",[null]]]],"^7","~$re-com.box/box","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",10,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",352,"^N",352,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1P","^1@","^1A","^1B"],"^1C",["^ ","^13","none"],"^1F","^1G"]]]],"^U","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box"],"~$box-args-desc",["^ ","^7","~$re-com.box/box-args-desc","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",334,"^M",1,"^N",334,"^O",19,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",334,"^M",6,"^N",334,"^O",19]],"~$debug",["^ ","^7","~$re-com.box/debug","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",6,"^M",1,"^N",6,"^O",11,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",6,"^M",6,"^N",6,"^O",11]],"~$justify-style",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",66,"^M",7,"^N",66,"^O",20,"^P",["^Q",["^R",["^Q",[["^1:"]]]]],"^U","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"^7","~$re-com.box/justify-style","^W",false,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",20,"^X",["^Q",[["^1:"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",66,"^N",66,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["^1:"]]]]],"^U","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"~$gap-args-desc",["^ ","^7","~$re-com.box/gap-args-desc","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",157,"^M",1,"^N",157,"^O",19,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",157,"^M",6,"^N",157,"^O",19]],"~$v-box",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",293,"^M",7,"^N",293,"^O",12,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]]]],"^U","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent","^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^Z",["^Q",[null]]]],"^7","~$re-com.box/v-box","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",12,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",293,"^N",293,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B"],"^1C",["^ ","^13","none","^1:","^1D","^T","^1E"],"^1F","^1G"]]]],"^U","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent"],"~$flex-child-style",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",13,"^M",7,"^N",13,"^O",23,"^P",["^Q",["^R",["^Q",[["^13"]]]]],"^U","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"^7","~$re-com.box/flex-child-style","^W",false,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",23,"^X",["^Q",[["^13"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",13,"^N",13,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["^13"]]]]],"^U","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"~$line-args-desc",["^ ","^7","~$re-com.box/line-args-desc","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",186,"^M",1,"^N",186,"^O",20,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",186,"^M",6,"^N",186,"^O",20]],"~$scroller-args-desc",["^ ","^7","~$re-com.box/scroller-args-desc","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",382,"^M",1,"^N",382,"^O",24,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",382,"^M",6,"^N",382,"^O",24]],"~$line",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",193,"^M",7,"^N",193,"^O",11,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","^12",["^13","~$color","^1@","^1A","^1B"],"^1C",["^ ","^13","1px","^2C","lightgray"],"^1F","^1G"]]]]]],"^U","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line","^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^2C","^1@","^1A","^1B"],"^1C",["^ ","^13","1px","^2C","lightgray"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^2C","^1@","^1A","^1B"],"^1C",["^ ","^13","1px","^2C","lightgray"],"^1F","^1G"]]]],"^Z",["^Q",[null]]]],"^7","~$re-com.box/line","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",11,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^2C","^1@","^1A","^1B"],"^1C",["^ ","^13","1px","^2C","lightgray"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^2C","^1@","^1A","^1B"],"^1C",["^ ","^13","1px","^2C","lightgray"],"^1F","^1G"]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^2C","^1@","^1A","^1B"],"^1C",["^ ","^13","1px","^2C","lightgray"],"^1F","^1G"]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",193,"^N",193,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^2C","^1@","^1A","^1B"],"^1C",["^ ","^13","1px","^2C","lightgray"],"^1F","^1G"]]]],"^U","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line"],"~$scroll-style",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",99,"^M",7,"^N",99,"^O",19,"^P",["^Q",["^R",["^Q",[["^S","^1X"]]]]],"^U","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^7","~$re-com.box/scroll-style","^W",false,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",19,"^X",["^Q",[["^S","^1X"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",99,"^N",99,"^[",2,"^10",true,"^P",["^Q",["^R",["^Q",[["^S","^1X"]]]]],"^U","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^1>",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",165,"^M",7,"^N",165,"^O",10,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^1@","^1A","^1B"],"^1F","^1G"]]]]]],"^U","Returns a component which produces a gap between children in a v-box/h-box along the main axis","^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^1@","^1A","^1B"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^1@","^1A","^1B"],"^1F","^1G"]]]],"^Z",["^Q",[null]]]],"^7","~$re-com.box/gap","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",10,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^1@","^1A","^1B"],"^1F","^1G"]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^1@","^1A","^1B"],"^1F","^1G"]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^14","^15","^1@","^1A","^1B"],"^1F","^1G"]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",165,"^N",165,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^14","^15","^1@","^1A","^1B"],"^1F","^1G"]]]],"^U","Returns a component which produces a gap between children in a v-box/h-box along the main axis"],"~$border-args-desc",["^ ","^7","~$re-com.box/border-args-desc","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",452,"^M",1,"^N",452,"^O",22,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",452,"^M",6,"^N",452,"^O",22]],"~$v-box-args-desc",["^ ","^7","~$re-com.box/v-box-args-desc","^K","resources/public/js/compiled/out/re_com/box.cljs","^L",274,"^M",1,"^N",274,"^O",21,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",274,"^M",6,"^N",274,"^O",21]],"~$box-base",["^ ","^I",null,"^J",["^ ","^K","/home/_mthom/repos/metagator/resources/public/js/compiled/out/re_com/box.cljs","^L",115,"^M",8,"^N",115,"^O",16,"~:private",true,"^P",["^Q",["^R",["^Q",[["~$&",["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","~$bk-color","^1P","~$class-name","^1@","^1A","^1B"]]]]]]],"^U","This should generally NOT be used as it is the basis for the box, scroller and border components","^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^2N","^1P","^2O","^1@","^1A","^1B"]]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^2N","^1P","^2O","^1@","^1A","^1B"]]]]],"^Z",["^Q",[null]]]],"^2M",true,"^7","~$re-com.box/box-base","^W",true,"^K","resources/public/js/compiled/out/re_com/box.cljs","^O",16,"^1H",["^ ","^W",true,"^[",0,"^X",[["^Q",[["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^2N","^1P","^2O","^1@","^1A","^1B"]]]]],"^P",["^Q",[["~$&",["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^2N","^1P","^2O","^1@","^1A","^1B"]]]]],"^Z",["^Q",[null]]],"^X",[["^Q",[["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^2N","^1P","^2O","^1@","^1A","^1B"]]]]],"^Y",null,"^Z",["^Q",[null]],"^M",1,"^L",115,"^N",115,"^[",0,"^10",true,"^P",["^Q",[["~$&",["^ ","^12",["^13","^1X","^1Y","^1Z","^14","^15","^16","^17","^18","^19","^1:","^T","^1;","^1<","^1=","^1J","^1K","^1L","^1M","^1N","^1O","^2N","^1P","^2O","^1@","^1A","^1B"]]]]],"^U","This should generally NOT be used as it is the basis for the box, scroller and border components"]],"~:require-macros",["^ ","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:description","~:min-width","~:children","~:align-items","~:align","~:bk-color","~:max-height","~:border-right","~:color","~:min-height","~:r-border","~:justify","~:default","~:overflow","^7","~:-webkit-flex-flow","~:background-color","~:h-scroll","~:-webkit-flex","~:-webkit-justify-content","~:width","^1D","~:type","~:flex","~:b-border","~:max-width","~:radius","~:border-left","~:size","~:style","~:div","~:span.bold","~:scroll","~:l-border","~:class","~:padding","~:justify-content","~:gap","~:t-border","~:code","~:overflow-x","~:validate-fn","~:br","~:class-name","~:child","~:align-self","~:border","~:border-top","~:overflow-y","~:border-radius","^1E","~:v-scroll","~:auto","~:required","~:height","~:border-bottom","~:span","~:flex-flow","~:margin","~:attr"]],"~:order",["^39","^3=","^36","^42","^3:","^3J","^3R","^3S","^3T","^3X","^3[","^43","^44","^2U","^2X","^2Y","^2Z","^31","^32","^33","^38","^3;","^3>","^3?","^3@","^3B","^3C","^3F","^3H","^3G","^3I","^3L","^3Q","^35","^3N","^3V","^2W","^3A","^2[","^3U","^40","^3W","^37","^3D","^7","^3Z","^3<","^3O","^2T","^41","^3M","^3P","^34","^30","^2V","^3E","^1D","^1E","^3K","^3Y"]],"^U",null]